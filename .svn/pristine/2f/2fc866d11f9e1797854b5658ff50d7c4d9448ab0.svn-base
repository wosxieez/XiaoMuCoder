package com.xiaomu.component
{
	import com.xiaomu.data.Actoin;
	import com.xiaomu.event.ActionHookEvent;
	
	import flash.utils.getQualifiedClassName;
	
	import coco.core.UIComponent;
	
	/**
	 * 钩子组件超类 
	 * @author coco
	 */	
	public class ActionComponent extends UIComponent
	{
		public function ActionComponent()
		{
			super();
			
			mouseChildren = false;
		}
		
		//----------------------------------------------------------------------------------------------------------------
		//
		// Properties
		//
		//----------------------------------------------------------------------------------------------------------------
		
		public var actionParam:Object;
		public var mouseDownX:Number = 0;
		public var mouseDownY:Number = 0;
		
		private var _upHookComponent:UpHookComponent;
		
		/**
		 * 向上的钩子 
		 * @return 
		 */		
		public function get upHookComponent():UpHookComponent
		{
			return _upHookComponent;
		}
		
		public function set upHookComponent(value:UpHookComponent):void
		{
			_upHookComponent = value;
			
			if (_upHookComponent)
				_upHookComponent.actionComponent = this;
		}
		
		private var _downHookComponent:DownHookComponent;
		
		/**
		 * 向下的钩子 
		 * @return 
		 */		
		public function get downHookComponent():DownHookComponent
		{
			return _downHookComponent;
		}
		
		public function set downHookComponent(value:DownHookComponent):void
		{
			_downHookComponent = value;
			
			if (_downHookComponent)
			{
				_downHookComponent.actionComponent = this;
				_downHookComponent.addEventListener(ActionHookEvent.MATCH_CHANGED, matchChangedHandler);
			}
		}
		
		private var _downHookComponent2:DownHookComponent;
		
		/**
		 * 向下的钩子2
		 * @return 
		 */		
		public function get downHookComponent2():DownHookComponent
		{
			return _downHookComponent2;
		}
		
		public function set downHookComponent2(value:DownHookComponent):void
		{
			_downHookComponent2 = value;
			
			if (_downHookComponent2)
			{
				_downHookComponent2.actionComponent = this;
				_downHookComponent2.addEventListener(ActionHookEvent.MATCH_CHANGED, matchChangedHandler);
			}
		}
		
		private var _action:Actoin;
		
		public function get action():Actoin
		{
			return _action;
		}
		
		public function set action(value:Actoin):void
		{
			_action = value;
		}
		
		//----------------------------------------------------------------------------------------------------------------
		//
		// Methods
		//
		//----------------------------------------------------------------------------------------------------------------
		
		override protected function measure():void
		{
			measuredWidth = measuredHeight = 50;
		}
		
		override protected function drawSkin():void
		{
			graphics.clear();
			graphics.beginFill(0x6C6C6C);
			graphics.drawRect(0, 0, width, height);
			graphics.endFill();
		}
		
		/**
		 * 将UI属性同步到data上 
		 */		
		public function syncData():void
		{
			action.className = getQualifiedClassName(this);
			action.x = x;
			action.y = y;
			action.actionParam = actionParam;
			if (upHookComponent)
				action.upHook = upHookComponent.hook;
			if (downHookComponent)
				action.downHook = downHookComponent.hook;
			if (downHookComponent2)
				action.downhook2 = downHookComponent2.hook;
		}
		
		
		//----------------------------------------------------------------------------------------------------------------
		//
		// 位置失效
		//
		//----------------------------------------------------------------------------------------------------------------
		
		private var invalidatePositionFlag:Boolean = false; // 位置失效
		
		public function invalidatePosition():void
		{
			if (!invalidatePositionFlag)
			{
				invalidatePositionFlag = true;
				callLater(validatePosition);
			}
		}
		
		/**
		 * call updatePosition now
		 */        
		public function validatePosition():void
		{
			if (invalidatePositionFlag)
			{
				invalidatePositionFlag = false;
				updatePosition();
			}
		}
		
		/**
		 * 更新相对位置 
		 */		
		protected function updatePosition():void
		{
			if (upHookComponent && upHookComponent.targetHookComponent)
			{
				x = upHookComponent.targetHookComponent.actionComponent.x + upHookComponent.targetHookComponent.x - upHookComponent.x;
				y = upHookComponent.targetHookComponent.actionComponent.y + upHookComponent.targetHookComponent.y - upHookComponent.y;
			}
		}
		
		protected function matchChangedHandler(event:ActionHookEvent):void
		{
			invalidateSkin();
		}
		
	}
}