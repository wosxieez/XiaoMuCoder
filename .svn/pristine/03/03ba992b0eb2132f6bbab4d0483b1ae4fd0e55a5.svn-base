package com.xiaomu.action
{
	import com.xiaomu.data.ActionComponentData;
	import com.xiaomu.manager.ActionManager;
	import com.xiaomu.view.stageview.RoleComponent;
	
	import flash.utils.getDefinitionByName;
	
	public class DoAction
	{
		public function DoAction()
		{
		}
		
		private var thisActionTarget:RoleComponent;
		private var thisActionData:ActionComponentData;
		private var thisActionCallback:Function;
		
		public function doAction(actionTarget:RoleComponent, 
								 actionData:ActionComponentData,
								 actionCallback:Function):void
		{
			thisActionTarget = actionTarget;
			thisActionData = actionData;
			thisActionCallback = actionCallback;
			
			trace(thisActionData.className + " doAction()");
			
			if (thisActionData.actionClassName)
			{
				var actionClass:Class = getDefinitionByName(thisActionData.actionClassName) as Class;
				var action:Action = new actionClass() as Action;
				if (action)
					action.doAction(thisActionTarget, thisActionData.actionClassParam, onActionComplete);
				else
					onActionComplete();
			}
			else
				onActionComplete();
		}
		
		private function onActionComplete():void
		{
			// 自己的脚本结束后 执行子脚本
			
			if (thisActionData.downActionHook2Data && 
				thisActionData.downActionHook2Data.targetActionHookData && 
				thisActionData.downActionHook2Data.targetActionHookData.actionComponentData)
			{
				ActionManager.getInstance().doAction(thisActionTarget,
					thisActionData.downActionHook2Data.targetActionHookData.actionComponentData,
					downActionHook2ActionComplete);
			}
			else if (thisActionData.downActionHookData &&
				thisActionData.downActionHookData.targetActionHookData && 
				thisActionData.downActionHookData.targetActionHookData.actionComponentData)
			{
				ActionManager.getInstance().doAction(thisActionTarget, 
					thisActionData.downActionHookData.targetActionHookData.actionComponentData,
					downActionHookActionComplete);
			}
			else
			{
				if (thisActionCallback)
					thisActionCallback.call();
			}
		}
		
		private function downActionHook2ActionComplete():void
		{
			if (thisActionData.downActionHookData &&
				thisActionData.downActionHookData.targetActionHookData && 
				thisActionData.downActionHookData.targetActionHookData.actionComponentData)
			{
				ActionManager.getInstance().doAction(thisActionTarget, 
					thisActionData.downActionHookData.targetActionHookData.actionComponentData,
					downActionHookActionComplete);
			}
			else
			{
				if (thisActionCallback)
					thisActionCallback.call();
			}
		}
		
		private function downActionHookActionComplete():void
		{
			if (thisActionCallback)
				thisActionCallback.call();
		}
		
	}
}